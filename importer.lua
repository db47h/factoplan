
factorio_path = arg[1]
package.path = factorio_path .. "/data/core/lualib/?.lua;" .. factorio_path .. "/data/base/?.lua;" .. package.path

-- define a few things needed to import data
defines = {
    difficulty_settings = {
        recipe_difficulty = {
            normal = 0
        },
        technology_difficulty = {
            normal = 0
        }
    },
    direction = {
        north = 0,
        east = 2,
        south = 4,
        west = 6
    }
}
data = {
    raw = {
        ["gui-style"] = {default = {}}
    }
}
function data:extend(a)
    for i, v in ipairs(a) do
        if data.raw[v.type] == nil then
            data.raw[v.type] = {}
        end
        data.raw[v.type][v.name] = v
    end
end

require("data")

function writeFactories(types)
    io.output("factories.go")
    io.write([[
// generated by factorio importer.lua; DO NOT EDIT

package main

var factories = map[string]*Factory{
]])

    for type, prop in pairs(types) do
        for mn, m in pairs(data.raw[type]) do 
            io.write('\t"', mn, '": &Factory{ID: "', mn, '\", Speed: ', m[prop], ' },\n')
        end
    end

    io.write("}\n")
    io.close()
end

writeFactories({
        ["mining-drill"] = "mining_speed",
        ["furnace"] = "crafting_speed",
        ["assembling-machine"] = "crafting_speed",
        ["lab"] = "researching_speed",
        ["offshore-pump"] = "pumping_speed"
    })

-- for rn, r in pairs(data.raw["resource"]) do 
--     print(rn)
--     -- for k, v in pairs(r.flags) do 
--     --     print("\t", k, v)
--     -- end
--     for k, v in pairs(r.minable) do 
--         if k == "results" then 
--             print ("\tresults")
--             for res, resv in pairs(v[1]) do
--                 print("\t\t", res, resv)
--             end
--         else
--             print("\t", k, v)
--         end
--     end     
-- end
